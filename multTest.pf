#DEFINE N 10000
#DEFINE mod mm
@test
subroutine SimpleTest()
  use pfunit_mod
  use mod
  real (kind = 8) :: mtx1(1,1), mtx2(1,1), mtx3(1,1)
  integer(kind = 4) :: ret
  mtx1(1,1) = 5
  mtx2(1,1) = 3
  call mult(mtx1, mtx2, mtx3, ret)
  @assertEqual(15, mtx3(1,1))
end

@test
subroutine LongTest()
  use pfunit_mod
  use mod
  real (kind = 8) :: mtx1(1,N), mtx2(N,1), mtx3(1,1)
  integer(kind = 4) :: ret, i
  do i = 1, N
     mtx1(1,i) = 1
     mtx2(i,1) = 1
  end do

  call mult(mtx1, mtx2, mtx3, ret)
  @assertEqual(N, mtx3(1,1))
end

@test
subroutine LushTest()
 use pfunit_mod
 use mod
 real (kind = 8) :: mtx1(N,1), mtx2(1, N), mtx3(N,N), mtxres(N, N)
 integer(kind = 4) :: ret, i, j
 do i = 1, N
    mtx2(1,i) = 1
    mtx1(i,1) = 1
    do j = 1, N
       mtxres(i,j) = 1;
    end do
 end do

 call mult(mtx1, mtx2, mtx3, ret)
 @assertEqual(mtxres, mtx3)
end

@test
subroutine ElephantTest()
 use pfunit_mod
 use mod
 real (kind = 8) :: mtx1(N,N), mtx2(N, N), mtx3(N,N), mtxres(N, N)
 integer(kind = 4) :: ret, i, j
 do i = 1, N
    do j = 1, N
       mtx1(i,j) = 1;
    end do
 end do
 do i = 1, N
   do j = 1, N
     mtx2(i,j) = 1;
   end do
 end do
 do i = 1, N
   do j = 1, N
     mtxres(i,j) = N;
   end do
 end do

 call mult(mtx1, mtx2, mtx3, ret)
 @assertEqual(mtxres, mtx3)
end

@test
subroutine NothingSpecialTest()
 use pfunit_mod
 use mod
 real (kind = 8) :: mtx1(3,5), mtx2(5,4), mtx3(3,4), mtxres(3, 4)
 integer(kind = 4) :: ret, i, j
 mtx1 = reshape((/ 1, 2, 4, 6, 8, 1, 6, 3, 6, 3, 6, 4, 8, 4, 4 /), (/3,5/))
 mtx2 = reshape((/ 1, 2, 4, 6, 8, 1, 6, 3, 6, 3, 6, 4, 8, 4, 4, 6, 7, 8, 5, 4/), (/5,4/))
 mtxres= reshape((/119, 98, 86, 97, 107, 64, 122, 108, 108, 143, 138, 115/), (/3,4/))
 ! I do consider line above as the most difficult task in a whole project

 call mult(mtx1, mtx2, mtx3, ret)
 @assertEqual(mtxres, mtx3)
end

@test
subroutine EvilTest()
 use pfunit_mod
 use mod
 real (kind = 8) :: mtx1(3,45), mtx2(78,23), mtx3(3,78)
 integer(kind = 4) :: ret

 call mult(mtx1, mtx2, mtx3, ret)
 @assertEqual(ret, 1.d0)
end
